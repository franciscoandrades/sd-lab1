syntax = "proto3";
package usermsg;

option go_package= "distribuidos/go-usermsg-grpc;go_usermsg_grpc";

message Message {    //con message escribimos una estructura del mensaje "Message"
    string play = 1;  //mensaje con el que el jugador acepta seguir jugando
    
}

message User{     
    int32 ID =1;  //ID del jugador
    
}

message Jugada1{    
    int32 ID = 1;    //ID jugador
    int32 jugada = 2; //número elegido por el jugador
    int32 etapa = 3; //etapa a la que correponde la jugada

}

message Jugada{    
    int32 ID = 1;    //ID jugador
    int32 jugada = 2; //número elegido por el jugador
    int32 ronda =3;
    int32 etapa = 4; //etapa a la que correponde la jugada
}

message Resp{
    int32 survive = 1; // 0 si el jugador murio, 1 si sigue vivo
    int32 partida =2 ; // 1 si la partida sigue en curso, 0 cc
    int32 juego = 3; //1 hay más de un jugador en competencia, 0 es el único jugador restante
    int32 ronda =4; 
    int32 etapa =5; 
}

message Req{
    string req = 1;
}

message Monto{
    int32 monto = 1; 
}


message Registro{
    string response =1;
}

message Check{
    string check =1;
}

message Data{
    int32 etapa =1;
    int32 ronda=2; //cantidad de rondas
    int32 jugada= 3;
}

service LiderServices {  //con los service definimos los Servicios del Lider
    rpc Play(Message) returns (User) {};   // en este caso tenemos un método NewPlayer que rebide un Message y retorna un User
    rpc Etapa1(Jugada1) returns (Resp){};
    rpc Etapa2(Jugada) returns (Resp){};
    rpc Etapa3(Jugada) returns (Resp){};
    rpc Pozo(Req) returns (Monto){};
    rpc Continue(Message) returns(Check){};
}

service PozoServices {
    rpc MontoPozo(Req) returns (Monto){};
}

service NameNode{
    rpc JugadaPlayer(Jugada) returns(Registro){};
}
service DataNode{
    rpc RegistrarInfo(Jugada) returns(Check){};
    rpc PlayerInfo(User) returns(Data){};
}
