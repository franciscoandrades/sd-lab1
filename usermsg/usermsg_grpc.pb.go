// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_usermsg_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiderServicesClient is the client API for LiderServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiderServicesClient interface {
	Play(ctx context.Context, in *Message, opts ...grpc.CallOption) (*User, error)
	Juego(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Resp, error)
	Pozo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Monto, error)
	Continue(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Check, error)
}

type liderServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewLiderServicesClient(cc grpc.ClientConnInterface) LiderServicesClient {
	return &liderServicesClient{cc}
}

func (c *liderServicesClient) Play(ctx context.Context, in *Message, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/usermsg.LiderServices/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liderServicesClient) Juego(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/usermsg.LiderServices/Juego", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liderServicesClient) Pozo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Monto, error) {
	out := new(Monto)
	err := c.cc.Invoke(ctx, "/usermsg.LiderServices/Pozo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liderServicesClient) Continue(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Check, error) {
	out := new(Check)
	err := c.cc.Invoke(ctx, "/usermsg.LiderServices/Continue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiderServicesServer is the server API for LiderServices service.
// All implementations must embed UnimplementedLiderServicesServer
// for forward compatibility
type LiderServicesServer interface {
	Play(context.Context, *Message) (*User, error)
	Juego(context.Context, *Jugada) (*Resp, error)
	Pozo(context.Context, *Req) (*Monto, error)
	Continue(context.Context, *Message) (*Check, error)
	mustEmbedUnimplementedLiderServicesServer()
}

// UnimplementedLiderServicesServer must be embedded to have forward compatible implementations.
type UnimplementedLiderServicesServer struct {
}

func (UnimplementedLiderServicesServer) Play(context.Context, *Message) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedLiderServicesServer) Juego(context.Context, *Jugada) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Juego not implemented")
}
func (UnimplementedLiderServicesServer) Pozo(context.Context, *Req) (*Monto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pozo not implemented")
}
func (UnimplementedLiderServicesServer) Continue(context.Context, *Message) (*Check, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Continue not implemented")
}
func (UnimplementedLiderServicesServer) mustEmbedUnimplementedLiderServicesServer() {}

// UnsafeLiderServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiderServicesServer will
// result in compilation errors.
type UnsafeLiderServicesServer interface {
	mustEmbedUnimplementedLiderServicesServer()
}

func RegisterLiderServicesServer(s grpc.ServiceRegistrar, srv LiderServicesServer) {
	s.RegisterService(&LiderServices_ServiceDesc, srv)
}

func _LiderServices_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderServicesServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermsg.LiderServices/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderServicesServer).Play(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiderServices_Juego_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderServicesServer).Juego(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermsg.LiderServices/Juego",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderServicesServer).Juego(ctx, req.(*Jugada))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiderServices_Pozo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderServicesServer).Pozo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermsg.LiderServices/Pozo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderServicesServer).Pozo(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiderServices_Continue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderServicesServer).Continue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermsg.LiderServices/Continue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderServicesServer).Continue(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// LiderServices_ServiceDesc is the grpc.ServiceDesc for LiderServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiderServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermsg.LiderServices",
	HandlerType: (*LiderServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _LiderServices_Play_Handler,
		},
		{
			MethodName: "Juego",
			Handler:    _LiderServices_Juego_Handler,
		},
		{
			MethodName: "Pozo",
			Handler:    _LiderServices_Pozo_Handler,
		},
		{
			MethodName: "Continue",
			Handler:    _LiderServices_Continue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermsg/usermsg.proto",
}

// PozoServicesClient is the client API for PozoServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PozoServicesClient interface {
	MontoPozo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Monto, error)
}

type pozoServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewPozoServicesClient(cc grpc.ClientConnInterface) PozoServicesClient {
	return &pozoServicesClient{cc}
}

func (c *pozoServicesClient) MontoPozo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Monto, error) {
	out := new(Monto)
	err := c.cc.Invoke(ctx, "/usermsg.PozoServices/MontoPozo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PozoServicesServer is the server API for PozoServices service.
// All implementations must embed UnimplementedPozoServicesServer
// for forward compatibility
type PozoServicesServer interface {
	MontoPozo(context.Context, *Req) (*Monto, error)
	mustEmbedUnimplementedPozoServicesServer()
}

// UnimplementedPozoServicesServer must be embedded to have forward compatible implementations.
type UnimplementedPozoServicesServer struct {
}

func (UnimplementedPozoServicesServer) MontoPozo(context.Context, *Req) (*Monto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MontoPozo not implemented")
}
func (UnimplementedPozoServicesServer) mustEmbedUnimplementedPozoServicesServer() {}

// UnsafePozoServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PozoServicesServer will
// result in compilation errors.
type UnsafePozoServicesServer interface {
	mustEmbedUnimplementedPozoServicesServer()
}

func RegisterPozoServicesServer(s grpc.ServiceRegistrar, srv PozoServicesServer) {
	s.RegisterService(&PozoServices_ServiceDesc, srv)
}

func _PozoServices_MontoPozo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PozoServicesServer).MontoPozo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermsg.PozoServices/MontoPozo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PozoServicesServer).MontoPozo(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// PozoServices_ServiceDesc is the grpc.ServiceDesc for PozoServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PozoServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermsg.PozoServices",
	HandlerType: (*PozoServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MontoPozo",
			Handler:    _PozoServices_MontoPozo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermsg/usermsg.proto",
}

// NameNodeClient is the client API for NameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeClient interface {
	JugadaPlayer(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Registro, error)
}

type nameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeClient(cc grpc.ClientConnInterface) NameNodeClient {
	return &nameNodeClient{cc}
}

func (c *nameNodeClient) JugadaPlayer(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Registro, error) {
	out := new(Registro)
	err := c.cc.Invoke(ctx, "/usermsg.NameNode/JugadaPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServer is the server API for NameNode service.
// All implementations must embed UnimplementedNameNodeServer
// for forward compatibility
type NameNodeServer interface {
	JugadaPlayer(context.Context, *Jugada) (*Registro, error)
	mustEmbedUnimplementedNameNodeServer()
}

// UnimplementedNameNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServer struct {
}

func (UnimplementedNameNodeServer) JugadaPlayer(context.Context, *Jugada) (*Registro, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JugadaPlayer not implemented")
}
func (UnimplementedNameNodeServer) mustEmbedUnimplementedNameNodeServer() {}

// UnsafeNameNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServer will
// result in compilation errors.
type UnsafeNameNodeServer interface {
	mustEmbedUnimplementedNameNodeServer()
}

func RegisterNameNodeServer(s grpc.ServiceRegistrar, srv NameNodeServer) {
	s.RegisterService(&NameNode_ServiceDesc, srv)
}

func _NameNode_JugadaPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).JugadaPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermsg.NameNode/JugadaPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).JugadaPlayer(ctx, req.(*Jugada))
	}
	return interceptor(ctx, in, info, handler)
}

// NameNode_ServiceDesc is the grpc.ServiceDesc for NameNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermsg.NameNode",
	HandlerType: (*NameNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JugadaPlayer",
			Handler:    _NameNode_JugadaPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermsg/usermsg.proto",
}

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeClient interface {
	RegistrarInfo(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Check, error)
	PlayerInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*Data, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) RegistrarInfo(ctx context.Context, in *Jugada, opts ...grpc.CallOption) (*Check, error) {
	out := new(Check)
	err := c.cc.Invoke(ctx, "/usermsg.DataNode/RegistrarInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) PlayerInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/usermsg.DataNode/PlayerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
// All implementations must embed UnimplementedDataNodeServer
// for forward compatibility
type DataNodeServer interface {
	RegistrarInfo(context.Context, *Jugada) (*Check, error)
	PlayerInfo(context.Context, *User) (*Data, error)
	mustEmbedUnimplementedDataNodeServer()
}

// UnimplementedDataNodeServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (UnimplementedDataNodeServer) RegistrarInfo(context.Context, *Jugada) (*Check, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarInfo not implemented")
}
func (UnimplementedDataNodeServer) PlayerInfo(context.Context, *User) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerInfo not implemented")
}
func (UnimplementedDataNodeServer) mustEmbedUnimplementedDataNodeServer() {}

// UnsafeDataNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServer will
// result in compilation errors.
type UnsafeDataNodeServer interface {
	mustEmbedUnimplementedDataNodeServer()
}

func RegisterDataNodeServer(s grpc.ServiceRegistrar, srv DataNodeServer) {
	s.RegisterService(&DataNode_ServiceDesc, srv)
}

func _DataNode_RegistrarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).RegistrarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermsg.DataNode/RegistrarInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).RegistrarInfo(ctx, req.(*Jugada))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_PlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).PlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermsg.DataNode/PlayerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).PlayerInfo(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNode_ServiceDesc is the grpc.ServiceDesc for DataNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermsg.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarInfo",
			Handler:    _DataNode_RegistrarInfo_Handler,
		},
		{
			MethodName: "PlayerInfo",
			Handler:    _DataNode_PlayerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermsg/usermsg.proto",
}
